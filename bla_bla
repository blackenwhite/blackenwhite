/*Design a data structure that supports insert, delete, search and getRandom in constant time
Design a data structure that supports the following operations in Î˜(1) time.

insert(x): Inserts an item x to the data structure if not already present.

remove(x): Removes an item x from the data structure if present.


search(x): Searches an item x in the data structure.

getRandom(): Returns a random element from current set of elements

Following are detailed operations.

insert(x)
1) Check if x is already present by doing a hash map lookup.
2) If not present, then insert it at the end of the array.
3) Add in the hash table also, x is added as key and last array index as the index.

remove(x)
1) Check if x is present by doing a hash map lookup.
2) If present, then find its index and remove it from a hash map.
3) Swap the last element with this element in an array and remove the last element.
Swapping is done because the last element can be removed in O(1) time.
4) Update index of the last element in a hash map.

getRandom()
1) Generate a random number from 0 to last index.
2) Return the array element at the randomly generated index.

search(x)
Do a lookup for x in hash map.

Below is the implementation of the data structure.

*/

#include <bits/stdc++.h>
using namespace std;

class mystruct{
  vector<int> arr;
  map<int,int> Map;
public:
  // a theta 1 function to add the elements
  void add(int x){
    if(Map.find(x)!=Map.end()){
      return;
    }
    int index=arr.size();
    arr.push_back(x);
    Map.insert(pair<int,int>(x,index));
  }

  void remove(int x){
    if(Map.find(x)==Map.end())
    return;
    int index=Map.at(x);
    Map.erase(x);
    int last=arr.size()-1;
    swap(arr[index],arr[last]);
    arr.pop_back();
    Map.at(arr[index])=index;
  }

  int search(int x){
    if(map.find(x)!=Map.end()){
      return Map..at(x);
    }
    return -1;
  }
  int getRandom()
    {
        // Find a random index from 0 to size - 1
        srand (time(NULL));
        int random_index = rand() % arr.size();

        // Return element at randomly picked index
        return arr.at(random_index);
    }
};

// Driver main
int main()
{
    myStructure ds;
    ds.add(10);
    ds.add(20);
    ds.add(30);
    ds.add(40);
    cout << ds.search(30) << endl;
    ds.remove(20);
    ds.add(50);
    cout << ds.search(50) << endl;
    cout << ds.getRandom() << endl;
} 
